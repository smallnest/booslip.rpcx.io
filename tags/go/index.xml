<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 竹简书摘</title><link>https://booslip.rpcx.io/tags/go/</link><description>Recent content in Go on 竹简书摘</description><generator>Hugo</generator><language>zh-CN</language><copyright>鸟窝</copyright><lastBuildDate>Thu, 09 Jan 2025 18:05:12 +0800</lastBuildDate><atom:link href="https://booslip.rpcx.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>GRPC Microservices in Go</title><link>https://booslip.rpcx.io/posts/grpc-microservices-in-go/</link><pubDate>Thu, 09 Jan 2025 18:05:12 +0800</pubDate><guid>https://booslip.rpcx.io/posts/grpc-microservices-in-go/</guid><description>&lt;div class="component-content pagebody component">
 &lt;h2 id="第一章go-grpc-微服务简介" class="pagebody-header">
 &lt;strong>第一章：Go gRPC 微服务简介&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>gRPC 的跨平台和多语言兼容性&lt;/strong>：gRPC 工具和库与多种平台和语言兼容，包括 Go、Java、Python、Ruby、JavaScript 和 C# 等。Protobuf 二进制线格式和代码生成功能使开发者能够构建高性能的跨平台应用程序。&lt;/li>
&lt;li>&lt;strong>gRPC 的优势&lt;/strong>：gRPC 越来越受欢迎，因为它能够快速生成客户端存根，为不同语言的服务提供 SDK。开发者只需定义业务对象和方法，gRPC 就可以生成特定语言的实现，使得服务器端和客户端可以使用不同的开发语言进行通信。&lt;/li>
&lt;li>&lt;strong>容错能力&lt;/strong>：容错是指系统在发生故障时仍能继续运行的能力。&lt;strong>幂等操作是实现容错环境的关键&lt;/strong>，因为它可以确保即使多次调用同一操作，资源的状态也不会发生改变。此外，容错还包括限流、熔断和故障注入等主题，这些将在第六章详细介绍。&lt;/li>
&lt;li>&lt;strong>多语言开发环境&lt;/strong>：gRPC 非常适合多语言开发环境，因为可以使用 Python 客户端访问用 Java 编写的 Payment 服务，客户端存根生成非常方便。&lt;/li>
&lt;li>&lt;strong>微服务验证机制&lt;/strong>：当服务定义发生更改时，客户端的测试会失败，这是一种用于验证微服务的有效机制。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第二章grpc-与微服务" class="pagebody-header">
 &lt;strong>第二章：gRPC 与微服务&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>微服务架构的优势&lt;/strong>：单体架构在产品开发的初期阶段很有帮助，但在评估产品的可扩展性、开发和部署问题后，以及熟悉业务能力和服务上下文后，切换到微服务架构是一种最佳实践。&lt;/li>
&lt;li>&lt;strong>扩展立方体（Scale Cube）&lt;/strong>：扩展立方体是一个三维可扩展模型，包括 X 轴扩展（运行多个相同应用副本）、Y 轴扩展（根据功能分解服务）和 Z 轴扩展（根据请求属性路由请求）。&lt;/li>
&lt;li>&lt;strong>异步通信&lt;/strong>：发布/订阅（Pub/Sub）或命令通道机制是异步通信的示例，而请求/响应风格（如 gRPC）是同步通信的示例。&lt;/li>
&lt;li>&lt;strong>Saga 模式&lt;/strong>：基于编排（Choreography）和协调器（Orchestrator）的 Saga 模式提供了分布式环境中的数据一致性。&lt;/li>
&lt;li>&lt;strong>gRPC 的应用&lt;/strong>：gRPC 是一种现代、轻量级的通信协议，也是一个高性能的 RPC 框架，它通过协议缓冲区高效地连接微服务环境中的服务，并内置支持负载均衡、跟踪、健康检查和身份验证。&lt;/li>
&lt;li>&lt;strong>.proto 文件&lt;/strong>：使用 Protocol Buffers 定义消息和服务函数，并通过协议缓冲区编译器（protoc）生成服务器和客户端存根。&lt;/li>
&lt;li>&lt;strong>gRPC 的工作流程&lt;/strong>：定义 .proto 文件，生成客户端和服务器存根，实现服务器端和客户端的业务逻辑，最后运行服务和客户端。&lt;/li>
&lt;li>&lt;strong>流式处理&lt;/strong>：gRPC 支持客户端和服务器端的流式处理，允许客户端连续发送请求，服务器可以返回一个对象流。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第三章开始使用-grpc-和-golang" class="pagebody-header">
 &lt;strong>第三章：开始使用 gRPC 和 Golang&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Protocol Buffers&lt;/strong>：Protocol Buffers 允许序列化结构化数据以便通过网络传输，并定义服务函数以生成特定语言的源代码。&lt;/li>
&lt;li>&lt;strong>.proto 文件&lt;/strong>：.proto 文件是配置文件的形式，包含消息和服务函数的定义，也包含协议的版本信息（例如 proto3）。&lt;/li>
&lt;li>&lt;strong>消息类型定义&lt;/strong>：消息字段可以是单数（最多一个）、重复（多个值，包括零）或者保留的。字段类型可以是标量类型（如字符串和整数）、枚举或其他嵌入消息类型。&lt;/li>
&lt;li>&lt;strong>消息编码&lt;/strong>：协议缓冲区将消息转换为二进制格式进行传输，包括元数据部分和数据部分。&lt;/li>
&lt;li>&lt;strong>生成存根&lt;/strong>：protoc 工具可以接受多种参数来生成特定语言的源代码。&lt;/li>
&lt;li>&lt;strong>维护 .proto 文件&lt;/strong>：维护 .proto 文件需要考虑版本控制和向后/向前兼容性，通常会将 .proto 文件保存在单独的仓库中。&lt;/li>
&lt;li>&lt;strong>在 CI/CD 管道中添加存根生成过程&lt;/strong>：使用 GitHub Actions 可以自动化存根的生成过程。&lt;/li>
&lt;li>&lt;strong>Go 代码生成&lt;/strong>：使用 protoc 生成 Go 源代码，包括 go_package 选项和源代码相对路径。&lt;/li>
&lt;li>&lt;strong>消息和服务的定义&lt;/strong>: 了解如何在 .proto 文件中定义消息（message）类型，包括字段规则、字段类型以及保留字段。同时，也包含了服务（service）的定义，以及如何使用 rpc 调用定义服务函数。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第四章微服务项目设置" class="pagebody-header">
 &lt;strong>第四章：微服务项目设置&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>六边形架构&lt;/strong>：六边形架构通过端口允许外部参与者使用、实现和编排业务逻辑。&lt;/li>
&lt;li>&lt;strong>项目文件夹&lt;/strong>：一个典型的 Go 项目包含以下文件夹：application（包含业务逻辑），cmd（包含入口点），config（包含配置），internal/adapters（包含适配器），internal/ports（包含端口），以及 domain （包含核心业务实体）。&lt;/li>
&lt;li>&lt;strong>应用核心的实现&lt;/strong>：应用核心是业务逻辑的组合，包括领域模型和 API，外层依赖于内层，这使得先实现应用核心，再实现外层依赖变得更容易。&lt;/li>
&lt;li>&lt;strong>端口和适配器&lt;/strong>：端口是定义应用核心与外部世界交互的接口，适配器是端口的具体实现。&lt;/li>
&lt;li>&lt;strong>依赖注入&lt;/strong>：通过依赖注入来组合端口和适配器，然后运行应用。&lt;/li>
&lt;li>&lt;strong>配置管理&lt;/strong>：使用环境变量来分离生产和非生产环境，并读取数据库连接 URL 和应用端口。&lt;/li>
&lt;li>&lt;strong>使用 grpcurl 测试 gRPC 端点&lt;/strong>：使用 grpcurl 工具可以发送请求并测试 gRPC 服务。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第五章服务间通信" class="pagebody-header">
 &lt;strong>第五章：服务间通信&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>gRPC 存根&lt;/strong>：gRPC 存根用于在服务之间进行通信，它是由 .proto 文件生成的 Go 源代码。&lt;/li>
&lt;li>&lt;strong>依赖模块和实现端口和适配器&lt;/strong>：解释了如何在 Order 服务中依赖 Payment 服务，并实现相应的端口和适配器。&lt;/li>
&lt;li>&lt;strong>gRPC 客户端配置&lt;/strong>：使用 &lt;code>grpc.WithTransportCredentials(insecure.NewCredentials())&lt;/code> 来禁用 TLS 握手，使用 &lt;code>payment.NewPaymentClient(conn)&lt;/code> 来初始化 payment 存根实例。&lt;/li>
&lt;li>&lt;strong>错误处理&lt;/strong>：gRPC 使用预定义的状态码来表示不同的错误情况，并提供了一种结构化的方式来处理错误。&lt;/li>
&lt;li>&lt;strong>错误详情&lt;/strong>：通过 &lt;code>errdetails.BadRequest_FieldViolation&lt;/code> 和 &lt;code>errdetails.BadRequest&lt;/code> 可以传递详细的错误信息，包括字段和描述。&lt;/li>
&lt;li>&lt;strong>状态码&lt;/strong>：详细列出了 gRPC 中常用的状态码，例如 OK，CANCELLED, INVALID_ARGUMENT, ALREADY_EXISTS, PERMISSION_DENIED, RESOURCE_EXHAUSTED 等，这些状态码用于在服务间传递错误信息。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第六章弹性通信" class="pagebody-header">
 &lt;strong>第六章：弹性通信&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>弹性模式&lt;/strong>：弹性模式是用于处理分布式系统中网络故障的模式，包括超时、重试和熔断器。&lt;/li>
&lt;li>&lt;strong>超时模式&lt;/strong>：使用 &lt;code>context.WithTimeout&lt;/code> 或 &lt;code>context.WithDeadline&lt;/code> 来设置请求超时，防止长时间等待。&lt;/li>
&lt;li>&lt;strong>重试模式&lt;/strong>：使用 &lt;code>grpc_retry&lt;/code> 中间件来自动重试失败的请求，并使用 &lt;code>WithCodes&lt;/code>、&lt;code>WithMax&lt;/code> 和 &lt;code>WithBackoff&lt;/code> 等配置来控制重试行为。&lt;/li>
&lt;li>&lt;strong>熔断器模式&lt;/strong>：熔断器模式可以防止级联故障，并在服务恢复后自动重置。使用 &lt;code>gobreaker&lt;/code> 包来实现熔断器，通过 &lt;code>MaxRequests&lt;/code>、&lt;code>ReadyToTrip&lt;/code> 和 &lt;code>OnStateChange&lt;/code> 等配置来控制熔断器的行为。&lt;/li>
&lt;li>&lt;strong>gRPC 错误模型&lt;/strong>：gRPC 使用 &lt;code>status&lt;/code> 包来处理错误，包括 Code、Status 和 Message 三个主要字段，以及 &lt;code>ErrorDetails&lt;/code> 部分来包含详细的错误列表。&lt;/li>
&lt;li>&lt;strong>TLS 配置&lt;/strong>：使用 TLS 配置来保护服务间的通信，包括证书生成和 gRPC TLS 凭证的使用。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第七章测试微服务" class="pagebody-header">
 &lt;strong>第七章：测试微服务&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>测试金字塔&lt;/strong>：测试金字塔将软件测试分为单元测试、集成测试和端到端测试三个类别，单元测试占比最大，端到端测试占比最小。&lt;/li>
&lt;li>&lt;strong>单元测试&lt;/strong>：单元测试用于验证软件的特定单元，例如类或函数。测试工作流程包括设置、调用 SUT（被测系统）、验证和拆卸。&lt;/li>
&lt;li>&lt;strong>系统测试（SUT）&lt;/strong>：SUT 可以是类或整个应用程序，测试套件用于验证 SUT 的行为。&lt;/li>
&lt;li>&lt;strong>Mock&lt;/strong>：使用 Mock 来模拟依赖项，从而快速验证系统行为。使用 testify/mock 或 mockery 来生成 Mock。&lt;/li>
&lt;li>&lt;strong>集成测试&lt;/strong>：使用 Testcontainers 来初始化数据库等外部依赖项，并使用 Go 的测试框架来验证集成。&lt;/li>
&lt;li>&lt;strong>端到端测试&lt;/strong>：使用 Docker Compose 来定义和运行应用程序堆栈，并通过测试来验证整个流程。&lt;/li>
&lt;li>&lt;strong>测试覆盖率&lt;/strong>: 使用 &lt;code>go test -cover&lt;/code> 命令来查看测试覆盖率，并使用 &lt;code>-coverprofile&lt;/code> 来生成覆盖率报告。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第八章部署" class="pagebody-header">
 &lt;strong>第八章：部署&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Kubernetes&lt;/strong>：Kubernetes 是一个用于自动化部署、扩展和管理容器化应用程序的开源平台。&lt;/li>
&lt;li>&lt;strong>Kubernetes 的核心组件&lt;/strong>：包括 API 服务器、调度器、控制器管理器、etcd 和 kubelet 等。&lt;/li>
&lt;li>&lt;strong>Kubernetes 部署&lt;/strong>：通过 Deployment 资源来管理 Pod 的部署和更新。&lt;/li>
&lt;li>&lt;strong>Service&lt;/strong>：使用 Service 资源来暴露 Pod 作为内部或公共端点。&lt;/li>
&lt;li>&lt;strong>部署策略&lt;/strong>：包括 RollingUpdate、Blue-Green 和 Canary 等部署策略。&lt;/li>
&lt;li>&lt;strong>证书管理&lt;/strong>：介绍如何在 Kubernetes 环境中进行证书管理，包括 ClusterIssuer 和 Certificate 的使用。&lt;/li>
&lt;li>&lt;strong>使用 kubectl 进行部署&lt;/strong>: 详细介绍了如何使用 kubectl 命令来部署 Kubernetes 资源，包括 Deployment 和 Service。&lt;/li>
&lt;li>&lt;strong>GitOps&lt;/strong>：使用 ArgoCD 和 FluxCD 等工具来自动化部署过程。&lt;/li>
&lt;/ul>

&lt;div class="component-content pagebody component">
 &lt;h2 id="第九章可观测性" class="pagebody-header">
 &lt;strong>第九章：可观测性&lt;/strong>
 &lt;/h2>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>可观测性&lt;/strong>：可观测性是跟踪和分析分布式系统中问题的根本原因的关键，它通过跟踪、指标和日志来帮助我们了解系统状态。&lt;/li>
&lt;li>&lt;strong>跟踪（Traces）&lt;/strong>：跟踪是记录跨多个服务的请求旅程，包括操作和跨度（spans）。&lt;/li>
&lt;li>&lt;strong>指标（Metrics）&lt;/strong>：指标是用于量化系统性能的度量，例如延迟、请求数和错误率。&lt;/li>
&lt;li>&lt;strong>服务级别目标 (SLO)&lt;/strong>：定义了服务应达到的目标，例如正常运行时间或响应延迟。&lt;/li>
&lt;li>&lt;strong>日志（Logs）&lt;/strong>：日志是应用程序产生的消息，可以帮助我们理解发生了什么 。&lt;/li>
&lt;li>&lt;strong>OpenTelemetry&lt;/strong>：OpenTelemetry 是一组 API、SDK 和工具，用于收集和发送跟踪、指标和日志数据。&lt;/li>
&lt;li>&lt;strong>Jaeger&lt;/strong>：Jaeger 是一个用于分布式跟踪的开源系统。&lt;/li>
&lt;li>&lt;strong>Prometheus&lt;/strong>：Prometheus 是一个用于收集和存储指标的开源系统。&lt;/li>
&lt;li>&lt;strong>Fluent Bit&lt;/strong>：Fluent Bit 是一个轻量级的日志收集器，用于将日志转发到 Elasticsearch。&lt;/li>
&lt;li>&lt;strong>Elasticsearch&lt;/strong>：Elasticsearch 是一个用于存储和搜索日志的开源系统 。&lt;/li>
&lt;li>&lt;strong>Kibana&lt;/strong>：Kibana 是一个用于可视化日志的开源工具 。&lt;/li>
&lt;li>&lt;strong>整合可观察性工具&lt;/strong>: 详细介绍了如何将 OpenTelemetry、Jaeger、Prometheus、Fluent Bit、Elasticsearch 和 Kibana 集成在一起，以建立一个完整的可观察性堆栈。&lt;/li>
&lt;/ul></description></item><item><title>The Rules of Programming</title><link>https://booslip.rpcx.io/posts/the-rules-of-programming/</link><pubDate>Wed, 01 Jan 2025 22:58:50 +0800</pubDate><guid>https://booslip.rpcx.io/posts/the-rules-of-programming/</guid><description>&lt;p>这份规则摘自克里斯·齐默曼的《编程规则：如何编写更好的代码》一书。书中作者结合其在微软和Sucker Punch游戏公司的编程团队管理经验，总结出一系列编程原则，旨在帮助程序员编写更简洁、易于测试和维护的代码。这些原则涵盖了代码简洁性、算法选择、测试策略、团队协作、代码审查以及代码重构等多个方面，并通过具体的代码示例和案例分析进行阐述。 书中还讨论了如何处理代码复杂性，以及如何平衡渐进式改进和彻底重构之间的关系。&lt;/p></description></item><item><title>System Programming Essentials With Go</title><link>https://booslip.rpcx.io/posts/system-programming-essentials-with-go/</link><pubDate>Sun, 29 Dec 2024 17:24:00 +0800</pubDate><guid>https://booslip.rpcx.io/posts/system-programming-essentials-with-go/</guid><description>&lt;p>本书主要介绍了使用Go语言进行系统级编程的知识。书中涵盖了并发编程、内存管理、性能分析、系统调用、网络编程、以及与硬件交互等多个方面。此外，还包含了命令行工具的开发、日志记录、监控和追踪等内容，并以一个分布式缓存的项目作为案例，展示了如何将所学知识应用于实践。最后，书中还讨论了高效编码技巧和一些常见问题的避免方法。&lt;/p></description></item><item><title>Go Recipes for Developers</title><link>https://booslip.rpcx.io/posts/go-recipes-for-developers/</link><pubDate>Sun, 29 Dec 2024 17:12:00 +0800</pubDate><guid>https://booslip.rpcx.io/posts/go-recipes-for-developers/</guid><description>&lt;p>本书涵盖了Go语言编程的多个方面，包括项目组织、日期时间处理、数组切片和映射的使用、JSON处理、进程管理、网络编程、流式输入输出、数据库交互、日志记录、测试和性能分析等。书中以“食谱”的形式，为开发者提供了大量实用代码示例和最佳实践，帮助解决实际编程问题。作者Burak Serdar拥有超过30年的软件工程经验，审稿人Dylan Meeus也具备丰富的编程经验，确保了书中内容的权威性和实用性。&lt;/p></description></item></channel></rss>